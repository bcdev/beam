Further development towards TrackPoints
=======================================

- Remove most calls to Placemark.createPointPlacemark():
  * Many of those calls copy placemarks from one VDN to another, although this will
    not be required anymore: we only need to copy VDN and their features. Then, placemarks
    will be created accordingly. This basically already implemented in
    ProductUtils.copyVectorData(source, target). Therefore we'll implement the capability
    of a VDN to create corresponding Placemarks whenever features are added.
    (Check: And vice versa?). Placemark collections will then stay in sync with feature
    collection. Also this is already implemented in PlacemarkGroup.
  * Analyse args of remaining calls: which are Pins, which GCPs, how general are these?
    e.g.: PointPlacemarkDescriptor.createPointPlacemark(<point-args>)
  * We don't store pins in DIMAP anymore, all placemarks will be stored in the same way.
- How will we import & export placemarks with respect to their underlying features.
  Will we only export features? No, this way we won't get all associated (sample) data
  for point placemarks.
- Action "Create new geometry container" --> "Create new feature collection" or
  "vector data node", users should also select feature type. BUT where do feature types
  come from? We have no registry. We have PlacemarkDescriptors. Shall users select
  from registered PlacemarkDescriptors? Then these must provide (default / basis) feature
  type. BUT then: How can they be responsible for (compatible with) more than one feature
  type?
    Possible idea: Every PlacemarkDescriptor produces a unique feature type and only features of
    exactly this type. Users must make a choice, when multiple PlacemarkDescriptors match the
    same feature type. This will happen when
    1. importing data (e.g. shapefiles)
    2. creating new vector data nodes (see "Create new geometry container")
    We might need something like dynamic features that are created for point features
    while bands are added or removed --> dynamic feature type (feature type extender, or
    "runtime feature type")
- When copying VDNs --> rename ones with same name that exist before
- Remove ProductProjectionBuilder but usage in MosaicProcessor: is it still required?
- Remove all redundant calls to PinDescriptor.getInstance()
- Remove all redundant calls to GcpDescriptor.getInstance()
- Remove VectorDataGroupTN.mustCount(), because there is later no need to differentiate
- Ease access from Figure (selection) to specific Placemarks + Features
- InsertPlacemarkInteractor --> InsertPointPlacemarkInteractor

- Discuss following roles
  * VectorDataNode:
    + feature type / placemark descriptor
    + collection of placemarks
  * Placemark (VectorDataItem)
    + placemark descriptor
    + feature

Revise data import / export
  - harmonise flat, plain text data table I/O
    - exported pin files
    - vector data node I/O
    - pixel extraction, transect data extraction
    - PixExOp
    - PixBox
    - Calvalus in-situ data / pixel extraction
    - VISAT copy to clipboard actions
  - text data table I/O shall be done using a transfer object that comprises a property map plus a feature collection
  - feature type attribute naming: camel-case or underscore?
  - format proposal:

    property-record        := '#'<property-name> '=' <property-value>
    attribute-header       := <attribute-name> [<attribute-type-spec>]
    attribute-type-spec    := ':'<attribute-type>
    feature-format         := {<property-record> NL} <feature-type-record> {NL <feature-record>}
    simple-format          := {<property-record> NL} <header-record>       {NL <data-record>}
    feature-type-record    := '@'<feature-type-name> {<sep> <attribute-header>}
    feature-record:        := <feature-id>           {<sep> <attribute-value>}
    header-record          := <attribute-header> {<sep> <attribute-header>}
    data-record:           := <attribute-value>  {<sep> <attribute-value>}
    sep:                   := TAB | [';' | ',', ...]  (TBC)

    Special-meaning attribute names may be auto-detected by BEAM:
    - lat, latitude
    - lon, long, longitude
    - time, date, date_time, dateTime
    Attribute format detection may apply if <attribute-type-spec> is missing
    - number, date, time


- Revise profile plot with respect to reference data
    - shall operate on selected vector data nodes
      - if VDN contains points geometry types:
           - points are vertexes
           - each point may provide reference data (feature attributes)
           - the GUI lets the user select an attribute to be displayed
           - color used is the point color (pin)
      - if VDN contains shapes
           - for each shape a profile is drawn using the shape's color
           - the selected shape may be also hi-lighted in the chart
           - option to only display selected shape
    - possibly visualise time difference
    - optionally hide points with to large time delta

- revise scatter plot with respect to reference data
    - extend existing or create a 2nd scatter plot panel for in-situ data comparisons
    - allow to select vector data nodes containing point data as 2nd variable (feature attribute name)
      In this case, data pairs are generated by reading pixel data at each given point and its attribute value
    - display statistics
    - allow for macro pixels (see Calvalus match-up scenario)
    - possibly visualise time difference
    - optionally hide points with to large time delta